openapi: 3.0.0
info:
  title: Rise API
  version: 1.0.0
  description: Rise API Docs

paths:
  /plans:
    post:
      summary: Create a new plan
      tags:
        - Plans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlanDTO"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
      security:
        - headlessAuth: []

    get:
      summary: Admin/User List plans
      tags:
        - Plans
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive, matured]
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedPlanResult"
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /plans/{id}:
    get:
      summary: Fetch a specific plan
      tags:
        - Plans
        - $ref: "#/components/parameters/PlanId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

    patch:
      summary: Edit a plan
      tags:
        - Plans
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: [multipart/form-data, application/json]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditPlanDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

    delete:
      summary: Delete a plan
      tags:
        - Plans
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful response
        "403":
          description: Forbidden
        "404":
          description: Not found
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /plans/{id}/history:
    get:
      summary: Fetch plan history
      tags:
        - Plans
        - $ref: "#/components/parameters/PlanId"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/orderParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedMaturityLogResult"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /plans/{id}/returns:
    get:
      summary: Fetch plan returns
      tags:
        - Plans
        - $ref: "#/components/parameters/PlanId"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/orderParam"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedPlanReturnsResult"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /plans/{id}/performances:
    get:
      summary: Fetch plan performances
      tags:
        - Plans
        - $ref: "#/components/parameters/PlanId"
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/orderParam"
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [daily, weekly, monthly, yearly]
            default: daily
          description: The type of performance data to retrieve.
        - in: query
          name: paginate
          description: Whether or not the items should be paginated.
          schema:
            type: boolean
            default: true

      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/PaginatedPlanPerformancesResult"
                  - type: array
                    items:
                      $ref: "#/components/schemas/PlanPerformance"
                description: The response may either be paginated or a full list of performances, depending on the `paginate` query parameter.

              examples:
                paginated:
                  summary: Paginated response example
                  value:
                    items:
                      - plan_id: "550e8400-e29b-41d4-a716-446655440000"
                        type: "daily"
                        description: "Performance for January 1, 2024"
                        holding_period_return: 1.2
                        geometric_return: 1.1
                        twr: 1.15
                        date: "2024-01-01T00:00:00Z"
                        starting_balance: 10000
                        closing_balance: 10120
                        deposits: 200
                        withdrawals: 80
                        cashflow: 120
                        returns: 120
                      - plan_id: "550e8400-e29b-41d4-a716-446655440001"
                        type: "daily"
                        description: "Performance for January 2, 2024"
                        holding_period_return: 1.5
                        geometric_return: 1.3
                        twr: 1.25
                        date: "2024-01-02T00:00:00Z"
                        starting_balance: 10120
                        closing_balance: 10290
                        deposits: 200
                        withdrawals: 30
                        cashflow: 170
                        returns: 170
                    tem_count: 2
                    offset: 0
                nonPaginated:
                  summary: Non-paginated response example
                  value:
                    - plan_id: "550e8400-e29b-41d4-a716-446655440000"
                      type: "daily"
                      description: "Performance for January 1, 2024"
                      holding_period_return: 1.2
                      geometric_return: 1.1
                      twr: 1.15
                      date: "2024-01-01T00:00:00Z"
                      starting_balance: 10000
                      closing_balance: 10120
                      deposits: 200
                      withdrawals: 80
                      cashflow: 120
                      returns: 120
                    - plan_id: "550e8400-e29b-41d4-a716-446655440001"
                      type: "daily"
                      description: "Performance for January 2, 2024"
                      holding_period_return: 1.5
                      geometric_return: 1.3
                      twr: 1.25
                      date: "2024-01-02T00:00:00Z"
                      starting_balance: 10120
                      closing_balance: 10290
                      deposits: 200
                      withdrawals: 30
                      cashflow: 170
                      returns: 170
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /plans/{id}/config:
    post:
      summary: Set plan configuration
      tags:
        - Plans
        - $ref: "#/components/parameters/PlanId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /plans/{id}/toggle-reinvest:
    post:
      summary: Toggle plan reinvestment
      tags:
        - Plans
        - $ref: "#/components/parameters/PlanId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /plans/{id}/reinvest:
    post:
      summary: Reinvest matured plan
      tags:
        - Plans
        - $ref: "#/components/parameters/PlanId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReinvestDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /config:
    get:
      summary: Get custom plans from oracle
      tags:
        - Plans
        - in: query
          name: entity
          schema:
            type: string
            default: custom_plan
        - in: query
          name: filter_key
          schema:
            type: string
            enum: [category, is_live, pure]
            example: category
        - in: query
          name: filter_value
          schema:
            type: string
            enum: [goal, pure]
            example: goal
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomPlans"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /plans/stats:
    get:
      summary: Fetch users portfolio stats
      tags:
        - Plans
        - in: query
          name: owner_id
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AUMStats"
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /gifts:
    post:
      summary: Create a new gift
      tags:
        - Gifts
        - name: x-rise-authorization-token
          in: header
          description: Authorization token for 2fa actions
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendGiftDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gift"
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /gifts/{giftId}:
    get:
      summary: Fetch a specific gift
      tags:
        - Gifts
        - name: giftId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gift"
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /gifts/{giftId}/{action}:
    post:
      summary: Accept or decline a gift
      tags:
        - Gifts
        - in: path
          name: giftId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: action
          required: true
          schema:
            type: string
            enum: [accept, decline]
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gift"
        "404":
          description: Gift not found
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /gifts/{id}/cancel:
    patch:
      summary: Cancel a gift
      tags:
        - Gifts
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gift"
        "403":
          description: Forbidden
        "404":
          description: Gift not found
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /proxy/users/authenticate-2fa-action:
    post:
      summary: Authenticate 2FA action
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TwoFAActionDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TwoFAAction"
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /proxy/users/auto-invest-config:
    post:
      summary: Set auto-invest configuration for a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAutoInvestConfigDTO"
      responses:
        "200":
          description: Successful response
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error
          
  /users/generate-2fa-code:
    post:
      summary: Generates 2FA Code for user's actions e.g gift-plan
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateTwoFA"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                example: null
        "400":
          description: Invalid identifier type
        "500":
          description: We are having system-level issues. Please bear with us
          
  /users/verify-2fa-code:
    post:
      summary: Verify 2FA code for a user's actions e.g gift-plan
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyTwoFA"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Verify2FAResponse"
        "422":
          description: Invalid OTP
        "500":
          description: We are having system-level issues. Please bear with us
          
  
  /users/set-2fa-action:
    post:
      summary: Enable or disbale 2FA for a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetTwoFAAction"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                example: null
        "422":
          description: Invalid OTP
        "404":
          description: User not found
        "400":
          description: User not found
        "500":
          description: We are having system-level issues. Please bear with us
          
  /users/lets-know-you:
    post:
      summary: Collects User's personal info
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LetsKnowYou"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "500":
          description: We are having system-level issues. Please bear with us
  
  /users/create-pin:
    post:
      summary: Create Pin
      tags:
        - Users
      description: Allows a user create transaction PIN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionPin"
      responses:
        "200":
          description: PIN created successful
          content:
            application/json:
              schema:
                type: string
                example: null
        "500":
          description: We are having system-level issues. Please bear with us
          
  /users/change-password:
    post:
      summary: Change Password
      tags:
        - Users
        - in: query
          name: x-rise-authorization-token
          schema:
            type: string
            example: e520dfe5cec7812a7f4f18a297c83351949ccae6bf45c5f895d178909ce1c4f9
      description: Allows users chnage their password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                example: null
        "403":       
          description: This password is the same as the current password. Kindly provide a new password to proceed.
        "500":
          description: We are having system-level issues. Please bear with us
          
  /users/verify-email:
    post:
      summary: Verify Email
      tags:
        - Users
        - in: query
          name: x-rise-authorization-token
          schema:
            type: string
            example: e520dfe5cec7812a7f4f18a297c83351949ccae6bf45c5f895d178909ce1c4f9
      description: Allows users verify their email
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                example: null
        "500":
          description: We are having system-level issues. Please bear with us

  /plans/transaction-requests:
    post:
      summary: Fund or withdraw from a plan
      tags:
        - Transaction Requests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlanTransactionDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Plan"
        "403":
          description: Forbidden
        "404":
          description: Plan not found
        "422":
          description: Unprocessable entity

    get:
      summary: Fetch plan transaction requests
      tags:
        - Transaction Requests
        - in: query
          name: plan_id
          required: true
          schema:
            type: string
        - in: query
          name: owner_id
          schema:
            type: string
        - in: query
          name: request_type
          schema:
            type: string
            enum: ["funding", "withdrawal"]
        - in: query
          name: order
          schema:
            type: string
            enum: ["desc", "asc"]
        - in: query
          name: start_date
          schema:
            type: string
        - in: query
          name: end_date
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer

      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedTransactionRequestResult"
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /external-wallets:
    post:
      summary: Create Direct Debit External
      tags:
        - Direct Debit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DirectDebitDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectDebitExternalWallet"
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error
    get:
      summary: Get direct debit external wallets
      tags:
        - Direct Debit
        - in: query
          name: owner_id
          required: false
          schema:
            type: string
        - in: query
          name: wallet_type
          required: false
          schema:
            type: string
        - in: query
          name: status
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DirectDebitExternalWallet"
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /external-wallets/{externalWalletId}/{action}:
    post:
      summary: Update the state of a direct debit external wallet
      tags:
        - Direct Debit
        - in: path
          name: externalWalletId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: action
          required: true
          schema:
            type: string
            enum: [disable, re-enable]
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectDebitExternalWallet"
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /transaction-requests:
    post:
      summary: Initiate funding via Direct Debit
      tags:
        - Direct Debit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExternalWalletTransactionRequestDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalWalletTransactionRequestResponse"
        "422":
          description: Unprocessable entity
        "500":
          description: Internal server error

  /portfolios/{id}/assets:
    get:
      summary: Fetch assets under a portfolio
      tags:
        - Portfolios
      parameters:
        - $ref: "#/components/parameters/PortfolioId"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Asset"
                description: A list of assets.
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal server error

  /auth/register:
    post:
      parameters:
        - in: header 
          name: Content-Type 
          schema: 
            type: string 
            enum: [multipart/form-data, application/json] 
      summary: Register a new user
      tags:
        - Auths
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationDTO"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationDTOResponse"
        "400":
          description: Referral not found with that code ERTH20912
        "500":
          description: We are having system-level issues. Please bear with us

  /auth/validate-signup:
    post:
      summary: Checks if a users email, phone_number or referral code is valid
      tags:
        - Auths
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateSignupDTO"
      responses:
        "200":
          description: Successful validation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateSignupResponse"
        "500":
          description: We are having system-level issues. Please bear with us

  /auth/login:
    post:
      summary: User Login
      tags:
        - Auths
      description: Authenticates a user and starts a session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDTO"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationDTOResponse"
        "401":
          description: Invalid login credentials
        "500":
          description: We are having system-level issues. Please bear with us

  /verifications/request-otp:
    post:
      summary: Request OTP
      tags:
        - Verifications
      description: Generates an OTP using the verification service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestOTP"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                example: null
                  
        "400":
          description: Invalid request type
        "404":
          description: We could not find any account for user@example.com
        "500":
          description: We are having system-level issues. Please bear with us
    
  /verifications/verify-otp:
    post:
      summary: Verify OTP
      tags:
        - Verifications
      description: Allows users verify otp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOTP"
      responses:
        "200":
          description: Successful validation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyOTPResponse"
        "422":
          description: Your OTP has either expired or is invalid
        "404":
          description: We could not find any account for user@example.com
        "500":
          description: We are having system-level issues. Please bear with us

  /auth/reset-password:
    patch:
      summary: Change Password
      tags:
        - Auths
        - in: query
          name: x-rise-authorization-token
          schema:
            type: string
            example: e520dfe5cec7812a7f4f18a297c83351949ccae6bf45c5f895d178909ce1c4f9
      description: Resets a user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordDTO"
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationDTOResponse"
        "404":
          description: We could not find any account for bruce@test.com
        "500":
          description: We are having system-level issues. Please bear with us

  /auth/reset-pin:
    patch:
      summary: Reset PIN
      tags:
        - Auths
        - in: query
          name: x-rise-authorization-token
          schema:
            type: string
            example: e520dfe5cec7812a7f4f18a297c83351949ccae6bf45c5f895d178909ce1c4f9
      description: Allows a user to reset their transaction PIN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePINDTO"
      responses:
        "200":
          description: PIN reset successful
          content:
            application/json:
              schema:
                type: string
                example: null
        "404":
          description: We could not find any account for bruce@test.com
        "500":
          description: We are having system-level issues. Please bear with us

  /auth/confirm-password:
    post:
      summary: Confirm Password
      tags:
        - Auths
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmPasswordDTO"
      responses:
        "200":
          description: Successful validation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateSignupResponse"
        "404":
          description: We could not find any account for bruce@test.com
        "500":
          description: We are having system-level issues. Please bear with us
  
  /wallets:
    get:
      summary: Get All User Wallets
      description: Retrieves a list of wallets associated with the authenticated user.
      tags:
        - Wallets
        - $ref: "#/components/parameters/WalletCurrency"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Wallet"
        "401":
          description: Unauthorized - Invalid or missing token
        "500":
          description: We are having system-level issues. Please bear with us
  
  /wallets/vaults/total:
    get:
      summary: Get The Total Vaults of NGN Wallet
      description: Returns a summary of the vauls in a wallet
      tags:
        - Wallets
        - name: wallet_id
          in: query
          description: The wallet ID of the wallet
          required: true
          schema:
            type: string
            example: "5a13df65-dac0-4c68-800f-205eeebffc1e"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VaultsSummary"
        "401":
          description: Unauthorized - Invalid or missing token
        "500":
          description: We are having system-level issues. Please bear with us

  /identities/verified-verifications:
    get:
      summary: Get all verified identities for a user
      tags:
        - Identities
        - name: account_id
          in: query
          description: The account ID of the user
          required: true
          schema:
            type: string
            example: "3a13df65-dac0-4c68-800f-205eeebffc1e"
        - name: should_include_phone_number
          in: query
          description: Whether to include phone number verification
          required: false
          schema:
            type: boolean
            example: true
      responses:
        "200":
          description: List of user identities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Identity"
        "404":
          description: No ID found"
        "500":
          description: We are having system-level issues. Please bear with us

  /identities/recent:
    get:
      summary: Get recent verified identity for a user
      tags:
        - Identities
        - name: category
          in: query
          description: The category of the identity
          required: true
          schema:
            type: string
            enum: ['id-card', 'phone-number']
            default: id-card
      responses:
        "200":
          description: Recent identity of the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Identity"
        "404":
          description: No ID found"
        "500":
          description: We are having system-level issues. Please bear with us
  
  /quotes:
    get:
      summary: Fetch quote for the day
      tags:
        - Quotes
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quote"
        "500":
          description: Internal server error
          
  /campaigns:
    get:
      summary: Fetch campaigns
      tags:
        - Campaigns
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Campaign"
        "500":
          description: Internal server error

components:
  parameters:
    offsetParam:
      in: query
      name: offset
      schema:
        type: integer
    limitParam:
      in: query
      name: limit
      schema:
        type: integer
    orderParam:
      in: query
      name: order
      schema:
        type: string
        enum: [asc, desc]
        default: asc

    PlanId:
      name: id
      in: path
      required: true
      description: The ID of the plan
      schema:
        type: string
        format: uuid

    PortfolioId:
      name: id
      in: path
      required: true
      description: The ID of the portfolio
      schema:
        type: string
        format: uuid

    WalletCurrency:
      name: currency
      in: query
      required: true
      description: Currency of the wallet
      schema:
        type: string
        example: usd 
    
    Device:
      name: device
      in: header 
      schema: 
        type: string 
        example: "Apple/iPhone 13"
    
    Platform:  
      name: rise-platform
      in: header 
      schema: 
        type: string 
        example: "mobile"
      
    PlatformOS:
      name: rise-platform-os
      in: header 
      schema: 
        type: string 
        example: "ios"
    
    AppVersion:
      name: rise-app-version
      in: header 
      schema: 
        type: string 
        example: "3.21.34"

  schemas:
    CreatePlanDTO:
      type: object
      required:
        - plan_name
        - plan_type
        - owner_id
        - portfolio_config
        - duration
      properties:
        plan_name:
          type: string
        plan_type:
          $ref: "#/components/schemas/PlanType"
        owner_id:
          type: string
          format: uuid
        portfolio_config:
          $ref: "#/components/schemas/PortfolioConfig"
        cycle:
          type: number
          default: 1
        duration:
          type: number
        metadata:
          type: object
          properties:
            goal_amount:
              type: number
            created_by:
              type: string
            category:
              type: string
            type:
              type: string
            dividend_amount:
              type: number
            should_reinvest_dividends:
              type: boolean

    EditPlanDTO:
      type: object
      properties:
        plan_name:
          type: string
        picture:
          type: string
          format: uri
          nullable: true

    PaginatedPlanResult:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Plan"
        item_count:
          type: integer
        offset:
          type: integer

    PaginatedTransactionRequestResult:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/TransactionRequest"
        item_count:
          type: integer
        offset:
          type: integer

    MaturityLog:
      type: object
      properties:
        plan_id:
          type: string
        owner_id:
          type: string
        matured_at:
          type: string
          format: date-time
        cycle:
          type: number
        capital:
          type: number
        total_returns:
          type: number
        available_returns:
          type: number
        total_funded:
          type: number
        total_withdrawn:
          type: number
        created_at:
          type: string
          format: date-time

    PlanReturn:
      type: object
      properties:
        plan_id:
          type: string
        description:
          type: string
        interest_date:
          type: string
          format: date-time
        amount:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PlanPerformance:
      type: object
      properties:
        plan_id:
          type: string
        type:
          $ref: "#/components/schemas/PerformanceType"
        description:
          type: string
        holding_period_return:
          type: number
        geometric_return:
          type: number
        twr:
          type: number
        date:
          type: string
          format: date-time
        starting_balance:
          type: number
        closing_balance:
          type: number
        deposits:
          type: number
        withdrawals:
          type: number
        cashflow:
          type: number
        returns:
          type: number

    PaginatedMaturityLogResult:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/MaturityLog"
        item_count:
          type: number
        offset:
          type: integer

    PaginatedPlanReturnsResult:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/PlanReturn"
        item_count:
          type: number
        offset:
          type: integer

    PaginatedPlanPerformancesResult:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/PlanPerformance"
        item_count:
          type: number
        offset:
          type: integer

    ConfigDTO:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/PlanConfigType"
        config:
          oneOf:
            - $ref: "#/components/schemas/AutoInvestConfigDTO"
            - $ref: "#/components/schemas/PortfolioConfig"
      required:
        - type
        - config

    PlanConfigType:
      type: string
      enum:
        - autofund
        - portfolio

    AutoInvestConfigDTO:
      type: object
      properties:
        auto_invest_enabled:
          type: boolean
        auto_invest_frequency:
          $ref: "#/components/schemas/AutoInvestFrequency"
        auto_invest_config:
          $ref: "#/components/schemas/AutoInvestConfig"

    AutoInvestConfig:
      type: object
      properties:
        month_day:
          type: integer
          format: int32
          minimum: 1
          maximum: 31
        week_day:
          type: integer
          format: int32
          minimum: 1
          maximum: 7
        hour:
          type: integer
          format: int32
          minimum: 0
          maximum: 23
        amount:
          type: number
          format: double

    PortfolioConfig:
      type: object
      description: >
        List of one or more UUID keys mapping to PortfolioConfigData objects.
      properties:
        a81bc81b-dead-4e5d-abff-90865d1e13b1:
          $ref: "#/components/schemas/PortfolioConfigData"
        b21dc81b-bcde-4e5d-bcda-90865d1e13b2:
          $ref: "#/components/schemas/PortfolioConfigData"

    PortfolioConfigData:
      type: object
      properties:
        percentage:
          type: number
          format: double
        asset_class:
          $ref: "#/components/schemas/AssetClass"

    AssetClass:
      type: string
      description: The class of asset in the portfolio
      example: stock

    PlanStatus:
      type: string
      enum:
        - active
        - inactive
        - matured

    AutoInvestFrequency:
      type: string
      enum:
        - daily
        - weekly
        - monthly

    PerformanceType:
      type: string
      enum:
        - daily
        - weekly
        - monthly
        - yearly

    PlanType:
      type: string
      enum:
        - Savings
        - Build Wealth
        - Rent
        - Wedding
        - Kids
        - Business
        - School
        - Fixed Income
        - Stocks
        - Real Estate
        - Home
        - Travel
        - Fixed Dividend Income

    Plan:
      type: object
      properties:
        id:
          type: string
        plan_name:
          type: string
        owner_id:
          type: string
        portfolio_config:
          $ref: "#/components/schemas/PortfolioConfig"
        status:
          $ref: "#/components/schemas/PlanStatus"
        duration:
          type: number
        cycle:
          type: number
        capital:
          type: number
        investment:
          type: number
        picture:
          type: string
          nullable: true
        reinvest:
          type: boolean
        auto_invest_enabled:
          type: boolean
        auto_invest_frequency:
          $ref: "#/components/schemas/AutoInvestFrequency"
        auto_invest_config:
          $ref: "#/components/schemas/AutoInvestConfig"
        next_auto_invest_date:
          type: string
          format: date-time
        next_compound_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        total_funded:
          type: number
        total_withdrawn:
          type: number
        total_returns:
          type: number
        available_returns:
          type: number
        maturity_date:
          type: string
          format: date-time
        plan_type:
          $ref: "#/components/schemas/PlanType"
        metadata:
          type: object
          properties:
            created_by:
              type: string
            goal_amount:
              type: number
            is_gifted:
              type: boolean
            type:
              type: string
            category:
              type: string
      required:
        - plan_name
        - owner_id
        - portfolio_config
        - status
        - duration
        - cycle
        - capital
        - investment
        - reinvest
        - auto_invest_enabled
        - auto_invest_frequency
        - auto_invest_config
        - next_auto_invest_date
        - next_compound_date
        - total_funded
        - total_withdrawn
        - total_returns
        - available_returns
        - maturity_date
        - plan_type

    SendGiftDTO:
      type: object
      required:
        - plan_name
        - portfolio_config
        - amount
        - duration
        - description
        - recipient_identifier
        - plan_type
      properties:
        plan_name:
          type: string
        portfolio_config:
          $ref: "#/components/schemas/PortfolioConfig"
        amount:
          type: number
          format: float
          minimum: 0
        duration:
          type: integer
          format: int32
          minimum: 1
        description:
          type: string
        recipient_identifier:
          type: string
        plan_type:
          $ref: "#/components/schemas/PlanType"

    Gift:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner_id:
          type: string
          format: uuid
        recipient_identifier:
          type: string
          format: uuid
        plan_name:
          type: string
        amount:
          type: number
        duration:
          type: integer
        description:
          type: string
        status:
          type: string
          enum: [pending, accepted, declined, cancelled]
        portfolio_config:
          $ref: "#/components/schemas/PortfolioConfig"
        plan_type:
          $ref: "#/components/schemas/PlanType"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        metadata:
          $ref: "#/components/schemas/GiftMetadata"

    PlanTransactionDTO:
      type: object
      required:
        - plan_id
        - owner_id
        - amount
        - type
      properties:
        plan_id:
          type: string
        owner_id:
          type: string
          format: uuid
        amount:
          type: number
        type:
          type: string
          enum: [funding, withdrawal]
        should_waive_charges:
          type: boolean
          default: false
        penalty_fee_percent:
          type: integer
          minimum: 1
          maximum: 99
        transaction_request_id:
          type: string
          format: uuid

    TwoFAActionDTO:
      type: object
      required:
        - auth_type
        - auth_credential
        - auth_action
      properties:
        auth_type:
          type: string
          enum: ["password", "pin"]
          default: pin
        auth_credential:
          type: string
          default: "123456"
        auth_action:
          type: string
          enum: ["gift-plan", "wallet-transfer", "bank-withdrawal"]
          
    GenerateTwoFA:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum: ["gift-plan", "wallet-transfer", "bank-withdrawal"]
          
    VerifyTwoFA:
      type: object
      required:
        - action
        - otp
      properties:
        action:
          type: string
          enum: ["gift-plan", "wallet-transfer", "bank-withdrawal"]
        otp:
          type: string
          example: 123456
          
    
    SetTwoFAAction:
      type: object
      required:
        - action
        - otp
      properties:
        action:
          type: string
          enum: ["enable", "disable"]
        identifier_type:
          type: string
          enum: ["email", "phone"]
        otp:
          type: string
          example: 123456
          
          
    LetsKnowYou:
      type: object
      required:
        - gender
        - monthly_income_range
        - employment_status
        - job_sector
        - marital_status
        - how_did_you_hear_about_us
      properties:
        gender:
          type: string
          enum: ["Male", "Female", "Prefer not to say"]
        monthly_income_range:
          type: string
          enum: ["50k", "50k - 100k", "100k - 200k", "200k - 350k", "350k - 500k", "500k+"]
        employment_status:
          type: string
          enum: [ "Self employed", "Gov-sector employed", "Private sector employed", "Unemployed", "Retired"]
        job_sector:
          type: string
          enum: ["Agriculture / Agro Allied", "Advertisement / Media / Publishing", "Art / Design", "Automotive / Car Services", "Beverages / Drinks", "Consulting", "Ecommerce / Retail / Wholesales"]
        marital_status:
          type: string
          enum: ["Single", "Married", "Divorce", "Others"]
        how_did_you_hear_about_us:
          type: string
          enum: ["From family or friends", "Instagram", "Twitter", "Facebook", "Others"]

    UserAutoInvestConfigDTO:
      type: object
      required:
        - wallet_id
        - priority
        - wallet_type
        - scope
      properties:
        wallet_id:
          type: string
          format: uuid
        plan_id:
          type: string
          format: uuid
        priority:
          type: string
          enum: ["primary", "secondary"]
          default: "primary"
        wallet_type:
          type: string
          enum: ["external", "internal"]
          default: "internal"
        scope:
          type: string
          enum: ["global", "specific"]
          default: "global"

    TwoFAAction:
      type: object
      properties:
        otp:
          type: string

    HistoricalPerformance:
      type: object
      properties:
        year:
          type: number
        returns_percentage:
          type: number

    Composition:
      type: object
      properties:
        asset_class:
          type: string
        percentage:
          type: number

    ReinvestDTO:
      type: object
      properties:
        amount:
          type: number

    CustomPlans:
      type: array
      items:
        $ref: "#/components/schemas/CustomPlan"

    CustomPlan:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
        plan_type:
          $ref: "#/components/schemas/PlanType"
        description:
          type: string
        landing_page_image:
          type: string
        plan_image:
          type: string
        is_live:
          type: boolean
        has_add_money_screen:
          type: boolean
        risk_level:
          type: string
        returns_range:
          type: string
        historical_performance:
          type: array
          items:
            $ref: "#/components/schemas/HistoricalPerformance"
        composition:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Composition"
          example: { "9d6d3d58-c799-4147-a71e-3e5f59e239ea": { asset_class: "etf", percentage: 100 } }

    TransactionRequest:
      type: object
      required:
        - id
        - plan_id
        - owner_id
        - request_type
        - status
        - currency
        - amount
      properties:
        id:
          type: string
        plan_id:
          type: string
        owner_id:
          type: string
        request_type:
          type: string
          enum:
            - funding
            - withdrawal
        status:
          type: string
          enum:
            - pending
            - successful
            - failed
            - canceled
            - processing
        currency:
          type: string
        amount:
          type: number
        metadata:
          $ref: "#/components/schemas/TransactionMetadata"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    TransactionMetadata:
      type: object
      properties:
        source:
          $ref: "#/components/schemas/TransactionSource"
        destination:
          $ref: "#/components/schemas/TransactionDestination"
        source_id:
          type: string
        destination_id:
          type: string
        portfolio_config:
          $ref: "#/components/schemas/PortfolioConfig"
        wallet_fund_transaction_id:
          type: string
          nullable: true
        fee_transaction_id:
          type: string
          nullable: true
        fee:
          type: number
          nullable: true
        app_version:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        initiated_by:
          type: string
          nullable: true
        is_payout:
          type: boolean
          nullable: true
        is_reinvested:
          type: boolean
          nullable: true

    GiftMetadata:
      type: object
      properties:
        sender_name:
          type: string
        sender_email:
          type: string
        recipient_name:
          type: string
        recipient_email:
          type: string

    DirectDebitDTO:
      type: object
      properties:
        wallet_type:
          type: string
          enum: [direct_debit]
        metadata:
          type: object
          properties:
            external_wallet_id:
              type: string
            address:
              type: object
              properties:
                house_number:
                  type: string
                street_name:
                  type: string
                city:
                  type: string

    DirectDebitExternalWallet:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner_id:
          type: string
          format: uuid
        wallet_type:
          type: string
          enum: [direct_debit]
        created_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, inactive]
        is_visible:
          type: boolean
          default: true
        details:
          type: object
          properties:
            currency:
              type: string
              enum: [ngn]
            state:
              type: string
              enum: ["approved", "debitable", "rejected", "created", "paused", "canceled", "pending"]
            provider:
              type: string
              enum: [mono]
            bank_name:
              type: string
            account_number:
              type: string
            account_name:
              type: string
            reference:
              type: string
              format: uuid
            customer_id:
              type: string
              format: uuid
            provider_reference:
              type: string
              format: uuid
            external_wallet_bank_account_id:
              type: string
              format: uuid
            provider_action:
              type: object
              properties:
                type:
                  type: string
                  enum: [transfer, redirect]
                  default: transfer
                action:
                  type: object
                  properties:
                    icon:
                      type: string
                    bank_name:
                      type: string
                    account_number:
                      type: string
                    fee:
                      type: number
                      default: 50

    ExternalWalletTransactionRequestDTO:
      type: object
      required:
        - request_type
        - currency
        - wallet_currency
        - amount
        - external_wallet_id
      properties:
        external_wallet_id:
          type: string
          format: uuid
        request_type:
          type: string
          enum:
            - funding
            - withdrawal
        currency:
          type: string
          enum:
            - ngn
        amount:
          type: number
        wallet_currency:
          type: string
          enum:
            - ngn
            - usd

    ExternalWalletTransactionRequestResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - pending
            - successful
            - failed
            - canceled
            - processing
        currency:
          type: string
          enum:
            - ngn
        amount:
          type: number
        owner_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        transaction_id:
          type: string
          format: uuid
        request_type:
          type: string
          enum:
            - funding
            - withdrawal
        provider:
          type: string
          enum: [mono]
        local_amount:
          type: number
        local_currency:
          type: string
          enum: [ngn]
        external_wallet_id:
          type: string
          format: uuid
        fee:
          type: number
        provider_metadata:
          type: object
        screening:
          type: object

    TransactionSource:
      type: string
      enum:
        - crypto_wallet
        - account
        - virtual_account
        - bank_account
        - mobile_money
        - card
        - virtual_card
        - api_vendor
        - plan
        - wallet
        - portfolio
        - revenue
        - system
        - commission
        - gift
        - returns
    TransactionDestination:
      type: string
      enum:
        - crypto_wallet
        - account
        - virtual_account
        - bank_account
        - mobile_money
        - card
        - virtual_card
        - api_vendor
        - plan
        - wallet
        - portfolio
        - revenue
        - system
        - commission
        - gift
        - returns

    RegistrationDTO:
      type: object
      required:
        - email_address
        - password
        - phone_number
        - address_metadata
        - country
        - country_of_residence
      properties:
        email_address:
          type: string
          format: email
        password:
          type: string
          format: password
        phone_number:
          type: string
        address:
          $ref: "#/components/schemas/Address"
        country:
          type: string
          example: ngn
        country_of_residence:
          type: string
          example: ngn
        first_name:
          type: string
          example: John
          nullable: true
        last_name:
          type: string
          example: Doe
          nullable: true
        profile_picture:
          type: string
          format: uri
          example: https://rise-verifications-identities.s3.eu-west-1.amazonaws.com/000999111.jpg
          nullable: true
        date_of_birth:
          type: string
          format: date
          nullable: true
        referral_code:
          type: string
          nullable: true
          example: OKMHUIO8

    ValidateSignupDTO:
      type: object
      required:
        - identity_type
        - identifier
      properties:
        identity_type:
          $ref: "#/components/schemas/IdentifierType"
        identifier:
          type: string
          example: bruce@test.com

    ConfirmPasswordDTO:
      type: object
      required:
        - email_address
        - password
        - confirm_password
      properties:
        email_address:
          type: string
          example: bruce@test.com
        password:
          type: string
          example: "verLongPassword"
        confirm_password:
          type: string
          example: "verLongPassword"

    ValidateSignupResponse:
      type: object
      properties:
        is_valid:
          type: boolean

    Address:
      type: object
      required:
        - street_name
        - city
        - house_number
        - zip_code
      properties:
        street_name:
          type: string
          example: "yaba road"
        city:
          type: string
          example: Lagos
        house_number:
          type: string
          example: 50
        zip_code:
          type: string
          example: 10001

    RegistrationDTOResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30
        user_id:
          type: string
          format: uuid
        first_name:
          type: string
          example: Paul
        last_name:
          type: string
          example: Bruce
        email_address:
          type: string
          example: bruce@test.com
        account_id:
          type: string
          format: uuid
        account_type:
          $ref: "#/components/schemas/AccountType"

    IdentifierType:
      type: string
      enum:
        - email
        - phone_number
        - referral_code
      description: Type of user identity used for validation.

    AccountType:
      type: string
      enum:
        - individual
        - bussiness
        - group
      description: Type of user identity used for validation.

    PlatformOS:
      type: string
      enum:
        - android
        - ios

    LoginDTO:
      type: object
      required:
        - identifier
        - secret
        - mode
      properties:
        identifier:
          type: string
          example: bruce@gmail.com
          description: "The user's identifier (email or username)"
        secret:
          type: string
          example: seunmyg123$
          description: "The user's password or PIN"
        mode:
          type: string
          enum:
            - password
            - pin

    RequestOTP:
      type: object
      required:
        - request_type
        - identifier
      properties:
        destination:
          type: string
          example: user@example.com
        request_type:
          type: string
          enum:
            - reset-password
            - reset-pin
            - verify-email
            - change-password
            - verify-phone
            - 2fa-email
            - 2fa-phone
          example: "reset-password"

    ResetPasswordDTO:
      type: object
      required:
        - email_address
        - password
        - confirm_password
      properties:
        email_address:
          type: string
          example: "bruce@test.com"
        password:
          type: string
          format: password
          example: "NewSecurePass123"
        confirm_password:
          type: string
          format: password
          example: "NewSecurePass123"

    ChangePINDTO:
      type: object
      required:
        - email_address
        - transaction_pin
        - confirm_pin
      properties:
        email_address:
          type: string
          example: "bruce@test.com"
        transaction_pin:
          type: string
          example: "123456"
        confirm_pin:
          type: string
          example: "123456"

    UserDTO:
      type: object
      properties:
        email_address:
          type: string
          format: email
        password:
          type: string
          format: password
        phone_number:
          type: string
          example: +2348182763456
        address_metadata:
          $ref: "#/components/schemas/Address"
        country:
          type: string
          example: ngn
        country_of_residence:
          type: string
          example: ngn
        first_name:
          type: string
          example: John
          nullable: true
        last_name:
          type: string
          example: Doe
          nullable: true
        profile_picture:
          type: string
          format: uri
          example: https://rise-verifications-identities.s3.eu-west-1.amazonaws.com/000999111.jpg
          nullable: true
        date_of_birth:
          type: string
          format: date
          nullable: true
        referral_id:
          type: string
          nullable: true
          format: uuid
        username:
          type: string
          example: "johndoe"
        status:
          type: string
          example: "active"
        full_name:
          type: string
          example: john doe
        gender:
          type: string
          example: male
        accound_id:
          type: string
          format: uuid
        account_type:
          $ref: "#/components/schemas/AccountType"
        metadata:
          $ref: "#/components/schemas/UserMetadata"

    UserMetadata:
      type: object
      properties:
        news_letter_subscribed:
          type: boolean
          example: true
        auto_invest_configs:
          $ref: "#/components/schemas/AutoInvestConfig"

    AUMStats:
      type: object
      properties:
        total_returns:
          type: number
          description: Total returns across plans.
        percentage_change:
          type: number
          description: The percentage change in portfolio value.
        total_returns_percent:
          type: number
          description: Total returns as a percentage.
        investment_balance:
          type: number
          description: The current investment balance.
        portfolio_distribution:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AssetMix"
          example:
            {
              "9d6d3d58-c799-4147-a71e-3e5f59e239ea": { asset_class: "bond", value: 236.18 },
              "9e6d3d58-c799-4147-a71e-3e5f59e239ea": { asset_class: "etf", value: 633.85 },
              "9f6d3d58-c799-4147-a71e-3e5f59e239ea": { asset_class: "real-estate", value: 189.01 }
            }
          description: A record of asset classes and their corresponding mix.

    AssetMix:
      type: object
      properties:
        asset_class:
          type: string
        value:
          type: number
          description: The monetary value of this asset.

    PropertyInfo:
      type: object
      properties:
        property_type:
          type: string
          description: The type of property (e.g., house, apartment).
        build_year:
          type: string
          description: The year the property was built.
        size:
          type: number
          description: The size of the property in square units.
        beds:
          type: number
          description: Number of bedrooms in the property.
        baths:
          type: number
          description: Number of bathrooms in the property.
        address:
          type: string
          description: The property's address.
        city:
          type: string
          description: The city where the property is located.
        income:
          type: number
          description: The income generated by the property.

    AssetInfo:
      type: object
      properties:
        image:
          type: string
          description: URL to an image representing the asset.
        description:
          type: string
          description: A brief description of the asset.
        ticker:
          type: string
          nullable: true
          description: The stock ticker symbol, if applicable.
        property_info:
          $ref: "#/components/schemas/PropertyInfo"
          description: Information about a property, if applicable.

    Asset:
      type: object
      properties:
        type:
          type: string
          description: The type of asset.
        asset_class:
          $ref: "#/components/schemas/AssetClass"
          description: The asset class (e.g., etf, real-estate, bond).
        cost_price:
          type: number
          description: The cost price of the asset.
        previous_price:
          type: number
          description: The previous price of the asset.
        current_price:
          type: number
          description: The current price of the asset.
        info:
          $ref: "#/components/schemas/AssetInfo"
          description: Additional information about the asset.

    Wallet:
      type: object
      properties:
        id:
          type: string
          description: The user's wallet ID
          example: "1e419b5d-1266-44df-be93-1c4152c444dc"
        owner_id:
          type: string
          description: The user's account ID
          example: "3a13df65-dac0-4c68-800f-205eeebffc1e"
        balance:
          type: number
          format: float
          description: Wallet balance
          example: 1500.75
        interest:
          type: number
          format: float
          description: Wallet interest
          example: 45.50
        interest_enabled:
          type: boolean
          description: Indicates if interest is enabled for the wallet
          example: true
        currency:
          type: string
          enum: ["usd", "ngn"]
          description: The currency of the wallet
          example: "usd"
        is_default:
          type: boolean
          description: Indicates if this is the default wallet
          example: false

    VaultsSummary:
      type: object
      properties:
        vault_interest:
          type: number
          format: float
          description: Total interest
          example: 100000.304
        vault_capital:
          type: number
          format: float
          description: The vault capital
          example: 6500000.00
        total_vault_balance:
          type: number
          format: float
          description: The total vaults balance
          example: 8600000.304
        vault_count:
          type: number
          description: The number of vaults an NGN wallet has
          example: 10

    Identity:
      type: object
      properties:
        identity_type:
          type: string
          enum: ["bvn", "national_id", "passport", "driver_license", "voter_id", "ssnit", "phone_number"]
          description: The type of identity being verified
          example: "passport"
        identifier:
          type: string
          description: The actual identifier being verified
          example: "A12345678"
        owner_id:
          type: string
          description: The ID of the user who owns the identity
          example: "3a13df65-dac0-4c68-800f-205eeebffc1e"
        country:
          type: string
          description: The country where the ID type is accepted
          example: "NG"
        verification_status:
          type: string
          enum: ["verified", "rejected", "pending", "flagged", "cancelled"]
          description: The verification status of the identity
          example: "verified"
        verification_metadata:
          $ref: "#/components/schemas/VerificationMetadata"

    VerificationMetadata:
      type: object
      properties:
        provider:
          type: string
          enum: ["verifiedng", "appruve", "identity-pass", "manual", "termii", "smileid"]
          description: The provider used for verification
          example: "appruve"
    
    ChangePasswordDTO:
      type: object
      properties:
        password:
          type: string
          example: longPassword
        confirm_password:
          type: string
          example: longPassword
    
    VerifyOTP:
      type: object
      required:
        - action
        - identifier
        - otp
      properties:
        identifier:
          type: string
          example: user@example.com
        action:
          type: string
          enum:
            - reset-password
            - reset-pin
            - verify-email
            - change-password
            - verify-phone
            - 2fa-email
            - 2fa-phone
          example: "verify-email" 
        otp:
          type: string
          example: 123456
      
    VerifyOTPResponse:
      type: object
      properties:
        is_valid:
          type: boolean
          example: true
        token:
          type: string
          example: 82f065f0c8733a71721620c2301f5de3282177a679eccdbdf9fcfe60da5a22f4
    
    Verify2FAResponse:
      type: object
      properties:
        is_valid:
          type: boolean
          example: true
        token:
          type: string
          example: 82f065f0c8733a71721620c2301f5de3282177a679eccdbdf9fcfe60da5a22f4
    
    CreateTransactionPin:
      type: object
      required:
        - pin
      properties:
        pin:
          type: string
          example: 789234
          
    Quote:
      type: object
      properties:
        id:
          type: integer
          format: number
          example: 2
        quote:
          type: string
          example: "Please leave me alone"
        author:
          type: string
          example: "John Doe"
        showDate:
          type: string
          format: date
          example: "2025-03-07"
          
    
    Campaign:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Spring Promo"
        description:
          type: string
          example: "A special discount campaign for spring."
        type:
          type: string
          enum: [link, media]
          example: "media"
        url:
          type: string
          format: uri
          example: "https://example.com/campaign"
        thumbnailUrl:
          type: string
          format: uri
          example: "https://example.com/thumbnail.jpg"
        slot:
          type: integer
          example: 2
        displayDuration:
          type: integer
          default: 5
          example: 10
        showStartDate:
          type: string
          format: date
          example: "2025-03-01"
        showEndDate:
          type: string
          format: date
          example: "2025-03-31"
        mimetype:
          type: string
          example: "image/png"
        uuid:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"

    
  securitySchemes:
    headlessAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authentication for headless operations
      